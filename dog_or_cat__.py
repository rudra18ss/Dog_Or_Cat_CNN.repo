# -*- coding: utf-8 -*-
"""Dog_or_Cat ?

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/dog-or-cat-a0d99c47-2657-4fae-a35b-e9bc509f7b9e.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20240421/auto/storage/goog4_request%26X-Goog-Date%3D20240421T124306Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D8631cb1f65862e3a8f24b3f75574c09744c507a1ca546fc71f4e45a2d20324435c3eac870e72f516acbd48da52acc34d996d7a2acf0a1c071e1a5c8b9f94db48fa251f14a950922f0ac5d4ffa6c6f4984cf96e6be15c950e5c2878e14dd0055c88c2fbf665662c9f2acbd14bf94fb17bf3053fe636de02ed2530f7bc0f9a43ce050148dc5b1dc8432e1a6c38371129a8eaa52ada91027d7b67a4002a7e4a9be46113ec35c23ac6a3c275f4278549dd585bbcd5320ff112e809bdb2b30f2bd505461d898cc55e462ffffb6d0b61a77a272c15a31a401217761d97cf9e8feda953896f0b4dd07f19da324f35439122741798b56d33e0144f3a62d1e46bc2d7aa82
"""

import tensorflow as tf
from tensorflow import keras
from keras import Sequential
from keras.layers import Dense,Conv2D,MaxPooling2D,Flatten,BatchNormalization,Dropout

# generators
train_ds = keras.utils.image_dataset_from_directory(
    directory = '/kaggle/input/dogs-vs-cats/train',
    labels='inferred',
    label_mode = 'int',
    batch_size=32,
    image_size=(256,256)
)

validation_ds = keras.utils.image_dataset_from_directory(
    directory = '/kaggle/input/dogs-vs-cats/test',
    labels='inferred',
    label_mode = 'int',
    batch_size=32,
    image_size=(256,256)
)

# Normalize
def process(image,label):
    image = tf.cast(image/255. ,tf.float32)
    return image,label

train_ds = train_ds.map(process)
validation_ds = validation_ds.map(process)

# create CNN model

model = Sequential()

model.add(Conv2D(32,kernel_size=(3,3),padding='valid',activation='relu',input_shape=(256,256,3)))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=2,padding='valid'))

model.add(Conv2D(64,kernel_size=(3,3),padding='valid',activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=2,padding='valid'))

model.add(Conv2D(128,kernel_size=(3,3),padding='valid',activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2),strides=2,padding='valid'))

model.add(Flatten())

model.add(Dense(128,activation='relu'))
model.add(Dropout(0.1))
model.add(Dense(64,activation='relu'))
model.add(Dropout(0.1))
model.add(Dense(1,activation='sigmoid'))

model.summary()

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

history = model.fit(train_ds,epochs=10,validation_data=validation_ds)

import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'],color='red',label='train')
plt.plot(history.history['val_accuracy'],color='blue',label='validation')
plt.legend()
plt.show()

plt.plot(history.history['accuracy'],color='red',label='train')
plt.plot(history.history['val_accuracy'],color='blue',label='validation')
plt.legend()
plt.show()

plt.plot(history.history['loss'],color='red',label='train')
plt.plot(history.history['val_loss'],color='blue',label='validation')
plt.legend()
plt.show()

plt.plot(history.history['loss'],color='red',label='train')
plt.plot(history.history['val_loss'],color='blue',label='validation')
plt.legend()
plt.show()

# ways to reduce overfitting

# Add more data
# Data Augmentation -> next video
# L1/L2 Regularizer
# Dropout
# Batch Norm
# Reduce complexity

import cv2

test_img_1 = cv2.imread('/kaggle/input/testing-data-images/Cat.jpg')
# test_img_2 = cv2.imread('/kaggle/input/testing-data-images/Dog.jpg')

# # code for displaying multiple images in one figure

# #import libraries
# import cv2
# from matplotlib import pyplot as plt

# # create figure
# fig = plt.figure(figsize=(10, 7))

# # setting values to rows and column variables
# rows = 2
# columns = 2

# # reading images
# Image1 = cv2.imread('/kaggle/input/testing-data-images/Cat.jpg')
# Image2 = cv2.imread('/kaggle/input/testing-data-images/Dog.jpg')


# # Adds a subplot at the 1st position
# fig.add_subplot(rows, columns, 1)

# # showing image
# plt.imshow(Image1)
# plt.axis('off')
# plt.title("First")

# # Adds a subplot at the 2nd position
# fig.add_subplot(rows, columns, 2)

# # showing image
# plt.imshow(Image2)
# plt.axis('off')
# plt.title("Second")

print(test_img_1.shape)
# print(test_img_2.shape)

Image1 = cv2.resize(test_img_1,(256,256))
# Image2 = cv2.resize(test_img_2,(256,256))

test_input_1 = Image1.reshape((1,256,256,3))
# test_input_2 = Image2.reshape((1,256,256,3))

# model.predict(test_input_2)
model.predict(test_input_1)

